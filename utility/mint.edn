(def _args (if (empty? *command-line-args*) {} (read-string (first *command-line-args*))))

; parameters
(def uint256-max "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff")
(def include-cost uint256-max) ; uint256 max - don't allow inclusion
(def entity-amount 1)

; contracts abis
(def template-abi (slurp "../src/FragmentTemplate.json"))
(def entity-abi (slurp "../src/FragmentEntity.json"))

; file minting environment
(def file-env {"e" "" ; environment 
               "t" "svg" ; tags
               })

(defnode main)

(if (empty? *command-line-args*)
  (do
    ; code/script, use working directory artifacts
    (defchain template-minter
      "../src/tmp/live-chain-binary" (FS.Read :Bytes true) = .immutableData
      "../src/tmp/live-chain-env-binary" (FS.Read :Bytes true) = .mutableData
      include-cost (BigInt) (BigInt.ToBytes) = .includeCost
      [.immutableData .mutableData [] .includeCost]
      (Eth.EncodeCall template-abi "upload")
      (Log)
      (ToHex) (Log "Call Input"))

    (defchain entity-minter
      "../src/tmp/live-chain-env-binary" (FS.Read :Bytes true) = .mutableData
      entity-amount (BigInt) (BigInt.ToBytes) = .entityAmount
      [.mutableData .entityAmount]
      (Eth.EncodeCall entity-abi "upload")
      (ToHex) (Log "Call Input"))

    (schedule main template-minter)
    (schedule main entity-minter))
  (do
    ; file passed as argument
    (defchain store-file
      (first *command-line-args*) = .file-name (FS.Read :Bytes true) = .file-data
      ; serialize in our format
      .file-data (Set .fs .file-name) ; organize in a table
      .fs (ToBytes) (Brotli.Compress :Quality 11) = .immutableData >> .cachedData 
      (Hash.Keccak-256) (Slice :From 12) (ToBase58) (Log "hash") = .frag-hash
      ; we still use artifact env
      file-env (ToBytes) (Brotli.Compress :Quality 11) = .mutableData >> .cachedData
      include-cost (BigInt) (BigInt.ToBytes) = .includeCost
      [.immutableData .mutableData [] .includeCost]
      (Eth.EncodeCall template-abi "upload")
      (Log)
      (ToHex) (Log "Call Input")
      "../src/cache/frag/" >= .filename
      .frag-hash (AppendTo .filename)
      {"data" .cachedData "owner" "0x0000000000000000000000000000000000000000"} (WriteFile .filename) )
    
    (schedule main store-file)))

(run main)