(def _args (eval `(assoc {} ~@*command-line-args*)))

(def _parameters {:rootFolder (if (contains? _args "--rootFolder") (get _args "--rootFolder") "")
                  :gatewayURL (if (contains? _args "--gateway") (get _args "--gateway") "https://cloudflare-eth.com")})

(if (not (= platform "emscripten"))
  (do
    ; fix some incompatibilities with emscripten
    (def _Emscripten.Eval Pass)
    (def _Emscripten.EvalAsync Pass)))

(def tmp-folder "tmp/")
(def base-folder (str "user/" (get _parameters :rootFolder)))

(def frag-abi (slurp (str "FragmentTemplate.json")))
(def entity-abi (slurp (str "FragmentEntity.json")))

(load-file (str "shared.edn"))

(def main-rpc "https://cloudflare-eth.com")
(def rinkeby-rpc "https://rinkeby.infura.io/v3/f1f1f88885f54de7955ce248e1d69046")
(def goerli-rpc "https://goerli.infura.io/v3/f1f1f88885f54de7955ce248e1d69046")

(def fragments "0xC0DE7DD77E69d25A53fE05F8d3fe772654c29162")

; need those for multi-threading wasm
(def headers {"Cross-Origin-Opener-Policy" "same-origin"
              "Cross-Origin-Embedder-Policy" "require-corp"})

(defnode Root)

(def license-commercial-use "CC BY-SA 4.0")
(def license-non-commercial-use "CC BY-NC-ND 4.0")
(def img-server "https://img.fragments.foundation/")
(def player-server "https://player.fragments.foundation/")
(def embed-server "https://embed.fragments.foundation/")
(def uint256-max "115792089237316195423570985008687907853269984665640564039457584007913129639935")

(defloop handler ; must be loop!
  (Http.Read) = .request

  (Take "target")
  (Log "target")

  ; template metadata request
  (| (Regex.Match #"\/\?ch=(\d+)&t=(\w+)&m=(\w+)&i=(\d+)&ib=(\d+)&mb=(\d+)") >= .match
     (Count .match)
     (When
      (Is 7)
      (->
       (Msg "template")

       .match
       (| (Take 1) = .chainId
          (Match ["1" (-> main-rpc)
                  "4" (-> rinkeby-rpc)
                  "5" (-> goerli-rpc)]
                 :Passthrough false) = .current-rpc-server)
       (| (Take 2) = .templateId)
       (| (Take 3) = .mutableHash)
       (| (Take 4) = .includeCost)
       (| (Take 5) (ParseInt) (BigInt) (BigInt.ToHex) = .iblock)
       (| (Take 6) (ParseInt) = .mblock-int (BigInt) (BigInt.ToHex) = .mblock)

       ; fetch the mutable data to read parameters from
       "cache/mdata/" >= .mdata-file
       .mutableHash (AppendTo .mdata-file)
       (Maybe
        (->
         (ReadFile .mdata-file)
         (ExpectBytes))
        (->
         .mblock-int
         (If (Is 0)
             (->
              ; the mutable data is within the full upload
              {"block-number" .iblock
               "frag-hash" .templateId
               "expected-to" fragments} (Log) (Do fetch-block-data-upload) (Take 1)
              ; cache the data
              (WriteFile .mdata-file :Flush true))
             (->
              ; the mutable data is within update
              {"block-number" .iblock
               "frag-hash" .mutableHash
               "expected-to" fragments} (Do fetch-block-data-update) (Take 0)
              ; cache the data
              (WriteFile .mdata-file :Flush true)))))

       ; build image url
       img-server >= .imageUrl
       ; we cache by hash images on the image server
       [.templateId .mutableHash] (Hash.Keccak-256) (ToBase58) (AppendTo .imageUrl)

       ; build both normal and embedded player
       player-server >= .extUrl
       embed-server >= .animUrl
       "embed.html" (AppendTo .animUrl)
       "?ch=" (AppendTo .extUrl) (AppendTo .animUrl)
       .chainId (AppendTo .extUrl) (AppendTo .animUrl)
       "&t=" (AppendTo .extUrl) (AppendTo .animUrl)
       .templateId (AppendTo .extUrl) (AppendTo .animUrl)

       ; build name
       "Fragment " >= .name
       .templateId (AppendTo .name)
       ; include cost attribute
       .includeCost
       (If (IsNot uint256-max)
           (-> {"trait_type" "Stake to include"
                "value" .includeCost})
           (-> {"trait_type" "Stake to include"
                "value" "Unavailable"}))  >> .attribs

       ; json response
       {"name" .name
        "description" "A Fragment of The Metaverse"
        "external_url" .extUrl
        "animation_url" .animUrl
        "image" .imageUrl
        "attributes" .attribs}
       (ToJson) (Http.Response :Headers {"Content-Type" "application/json"})

       ; we are done here
       (Restart))))

  ; entity metadata request
  (| (Regex.Match #"\/\?ch=(\d+)&id=(\d+)&e=(\w+)&m=(\w+)&d=(\d+)") >= .match
     (Count .match)
     (When
      (Is 6)
      (->
       (Msg "entity")

       .match
       (| (Take 1) = .chainId)
       (| (Take 2) = .entityId)
       (| (Take 3) (FromBase58) (ToHex) = .entityContract)
       (| (Take 4) = .mutableHash)
       (| (Take 5) = .mblock)

       "/fragments-logo.png" (Http.SendFile)
       (Restart))))

  (Log "Invalid query"))


(defloop main
  (Http.Server handler))

(schedule Root main)
(run Root 0.1)